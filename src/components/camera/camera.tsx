// create arrow function to capture an image from capacitor camera plugin and save it to the file system


// Imports were manually added.
import { Component, Prop, h } from '@stencil/core';

// Generated code depecrated code here.
// import { Camera, CameraResultType } from '@capacitor/core';
                                                     
//Manually added the correct imports
import { Camera, ImageOptions, CameraResultType, Photo } from '@capacitor/camera';
import {  Capacitor } from '@capacitor/core';
import { Directory, Filesystem } from '@capacitor/filesystem';
import { Storage } from '@capacitor/storage';

// This code block was generated inside the captureImage function. I moved it here
const options: ImageOptions = {
    quality: 100,
    allowEditing: false,
    resultType: CameraResultType.Uri,
  };


// Generated by typing "@Component" and then pressing tab.
@Component({
    tag: 'app-camera',
    styleUrl: 'camera.css',
    shadow: true,
})


// Generated from the following statment 
// use stenciljs to create arrow function to capture an image from capacitor camera plugin and save it to the file system
// had to minor adjustments to the generated code. Such as removing 'const' infront of some functions.

export class AppCamera { 
    private PHOTO_STORAGE: string = 'photos';
    @Prop() expand?: 'block' | 'full';


captureImage = async () => {
    try {
        const image = await Camera.getPhoto(options);

        // Save photo
        const imageFile = await this.saveImage(image);

        // Write information to local storage
        Storage.set({
            key: this.PHOTO_STORAGE,
            value: JSON.stringify(imageFile)
        });
    } catch (error) {
        
    }
  };


// Here I had to be more specific and help CoPilot get started to generated code closer to what I was looking for.
// CoPilot began relevant suggestions after starting the function with 'async saveImage(cameraPhoto: Photo) { const base64Data = await this.readAsBase64(cameraPhoto);'
async saveImage(cameraPhoto: Photo) {
    const base64Data = await this.readAsBase64(cameraPhoto);
    const fileName = new Date().getTime() + '.jpeg';

    const savedFile = await Filesystem.writeFile({
        path: fileName,
        data: base64Data,
        directory: Directory.Data
    });
    console.log('saved: ', savedFile);
    console.log('Converted: ', Capacitor.convertFileSrc(savedFile.uri));


    if (this.getPlatform() === 'mobile') {
        // Display the new image by rewriting the 'file://' path to HTTP
        // Details: https://ionicframework.com/docs/building/webview#file-protocol
        return {
            filepath: savedFile.uri,
            webviewPath: Capacitor.convertFileSrc(savedFile.uri),
        };
    } else {
        // Use webPath to display the new image instead of base64 since it's
        // already loaded into memory
        return {
            filepath: fileName,
            webviewPath: cameraPhoto.webPath
        };
    }
}

// CoPilot generated this function after starting the it with 'async readAsBase64(cameraPhoto: Photo) {  '
async readAsBase64(cameraPhoto: Photo) {     
    if (this.getPlatform() === 'mobile') {
        // Read the file into base64 format
        const file = await Filesystem.readFile({    
            path: cameraPhoto.path
        });
        return file.data;
    } else {
        // Fetch the photo, read as a blob, then convert to base64 format
        const response = await fetch(cameraPhoto.webPath!);
        const blob = await response.blob();
        return await this.convertBlobToBase64(blob) as string;
    }
}

// Manually added code, I was not able to get CoPiolot to generate a function with Camera.pickImages.
async uploadImage() {     
    try {
        const image = await Camera.pickImages({limit: 1});
        if(image.photos.length === 1) {   
            // alert('UPLOADING...');
            // console.log('image: ', image);
        }
         else {
            alert('Please select 1 image');
        }
    } catch (error) {
        throw new Error(error.message);
    }
}


  convertBlobToBase64 = (blob: Blob) => new Promise((resolve, reject) => {
    const reader = new FileReader;
    reader.onerror = reject;
    reader.onload = () => {
      resolve(reader.result);
    };
    reader.readAsDataURL(blob);
  });

  // Manually added code, CoPiolot only showed deperacted code 
  getPlatform() {
    return Capacitor.isNativePlatform() ? 'mobile' : 'web'
  }


  //CoPilot generated after all other functions were created and I started with "render()" 
  render() {    
    return (
        <ion-button shape="round" expand={this.expand} onClick={this.uploadImage}>Capture Image</ion-button>
    );
  }
}
